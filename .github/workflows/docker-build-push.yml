name: Build, Push, and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and tag the Docker image
      run: |
        IMAGE_NAME_GHCR=ghcr.io/alpharubie/my-nginx-image
        IMAGE_NAME_DOCKERHUB=dockerhubuser/my-nginx-image

        # Build and tag the Docker image
        docker build -t $IMAGE_NAME_GHCR:latest -t $IMAGE_NAME_DOCKERHUB:latest .
        docker tag $IMAGE_NAME_GHCR:latest $IMAGE_NAME_GHCR:${{ github.sha }}
        docker tag $IMAGE_NAME_DOCKERHUB:latest $IMAGE_NAME_DOCKERHUB:${{ github.sha }}

    - name: Push the Docker image to GitHub Container Registry
      run: |
        IMAGE_NAME_GHCR=ghcr.io/alpharubie/my-nginx-image
        docker push $IMAGE_NAME_GHCR:latest
        docker push $IMAGE_NAME_GHCR:${{ github.sha }}

    - name: Push the Docker image to Docker Hub
      run: |
        IMAGE_NAME_DOCKERHUB=dockerhubuser/my-nginx-image
        docker push $IMAGE_NAME_DOCKERHUB:latest
        docker push $IMAGE_NAME_DOCKERHUB:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Decode SSH Key
      id: decode_key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 --decode > key.pem
        chmod 600 key.pem

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: key.pem

    - name: Deploy to server
      run: |
        IMAGE_NAME_DOCKERHUB=dockerhubuser/my-nginx-image

        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} << 'EOF'
          docker pull $IMAGE_NAME_DOCKERHUB:latest
          docker stop my-nginx-container || true
          docker rm my-nginx-container || true
          docker run -d --name my-nginx-container -p 80:80 $IMAGE_NAME_DOCKERHUB:latest
        EOF
